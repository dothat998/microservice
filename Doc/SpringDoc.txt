									Spring Boot


TierLayer trong springboot

Persentation layer : Tương tác với người dùng bằng Controller + view + api

Business logic : (Service) chứa toàn bộ code logic ở đây

Data access layer: (Repository) Tương tác với database trả kết quả về tầng business logic

============================================================================================================================================================
	
Bean là :thực chất là các object java, khác biệt ở chỗ là dc container tạo ra và quản lý.
		obj java do chính các dev gọi hàm new tạo ra và đến lúc destroy.

@Component => đánh dấu là 1 Bean => ApplicationContext.getBean(Class.class)

@ComponentScant để quét các bean dc chỉ định.

@Autowrite : tự động tìm trong container và khởi tạo 
		==> 3 cách sử dụng anotation này : 
								=> @Autowired ngay trên thuộc tính (thường dc sử dụng) tự tạo ra và inject vào
								=> Thêm vào trên contrucstor
								=> Thêm vào phương thức setter của thuộc tính đó

DI: khởi tạo giá trị trong class, cùi bắp, vì 1 class có nhiều DI mà DI lại phụ thuộc thằng khác, thì lại khó khăn để khởi tạo.
============================================================================================================================================================
@Scope 
các bean dc quản lý trong context đều trỏ vào 1 ô nhớ => 1 instance => đã có thì sẽ k khởi tạo nữa và cứ thế lấy ra instance đó (cơ chế sigleton).
==> nhưng muốn mỗi lần sử dụng là 1 object mới thì ta sử dụng @Scope(prototype), giá trị mặc định của nó là singleton (Request, session)

============================================================================================================================================================


Khi có 2 class dều gọi đến và muốn tạo bean
Muốn ưu tiên 1 bean bằng cách : => @Primary vào bên trên class muốn dc ưu tiên bean
				 	  => @Qualifier("tenbean") đi kèm với autowired, thêm ngay dưới @Autowired
					  => Thêm vào trên contrucstor
					  => Thêm vào phương thức setter của thuộc tính đó

============================================================================================================================================================

RestFul API
RequestMapping : nếu không chỉ rõ là method nào, thì khi chạy API nó sẽ chỉ cần đúng đường dẫn là chạy được.

============================================================================================================================================================
										 Exception 
Checked exception:  là những ngoại lệ mà phải được xử lý hoặc được đề nghị xử lí trong code. VD: 1 không thể chia dc cho 0, IDE hiện dấu đỏ để ta sửa
IOException, SQLException

Unchecked exception: là những ngoại lệ không bắt buộc phải xử lý, chúng xuất hiện do lỗi logic hoặc các lỗi khác trong chương trình
VD : NullPointerException, chúng ta cần handler nó ra.


@ExceptionHandler : đánh dấu method sẽ sử lý ex cụ thể trong controller => chỉ sử dụng được trong 1 controller cụ thể
@HandlerExceptionResolver :Global hơn Exception cho phép tự custom 1 handlerex
@ControlerAdivce: đến từ AOP lập trình hướng khía cạnh, nó sẽ bắt lỗi và trả ra cho client mà k cần qua controller

============================================================================================================================================================
Usermanagement : Đăng kí tài khoản + cập nhật(email, pass..) + search .....

Authentication: Xác thực người dùng => thường được thực hiện bằng kiểm tra username và password.
			=> cơ chế (built in application)  
			=> nhờ bên thứ 3 (facebooke, gmail,zalo) => OAuth1 + OAuth2 + SpringScurity
Authotication: Phân Quyền
			=> Role
			=> RBAC ( Role Base Access Control) => 1 role có nhiều quyền
									=> 1 người có nhiều role

============================================================================================================================================================
									Spring security
=> Cốt lõi spring security là 1 loạt các bộ lọc servlert giúp thêm Authentication và authotication vào ứng dụng web.

============================================================================================================================================================
									JWT - Json Web Token

JWT bao gồm 3 phần : Header - Payload - Signature
Quy Trình loggin tạo token : 

Vào request login : => loadUserByUsername (userService) : tìm user có trong hệ thống hay không?
				=> buid user trên hệ thống
				=> JwtProvider để createToken + validate token
				=> Nếu có ngoại lệ thì nhảy sang JwtEntryPoint
	 



































































