ssh centos@192.168.87.41
mk: centos

sudo -s

============================================================================================================================================================================
											DOCKER _ WINDOWS

Cài đặt ubuntu trong Microsoft Store - cài đặt các package : apt-get update or apt-get install -y mc





docker run --name that_mysql -e MYSQL_ROOT_PASSWORD=That@123 -p 3333:3306 -d mysql:8.0.31
docker run --name mysqlcontainer -e MYSQL_ROOT_PASSWORD=123456 -p 3333:3306 -d mysql:8.0.31


curl -sSL https://raw.githubusercontent.com/bitnami/containers/main/bitnami/kafka/docker-compose.yml > docker-compose.yml


docker exec -it mysqlcontainer bash
mysql -u root -p

show databases;
use dataName;
thuc hien cac cau lenh sql



Triển khai Spring lên Docker

- Dockerfile - dockerinoger
- exentd openJdk docker 

- Build your own image with Dockerfile
docker build --tag springboot-docker .

To create a new tag for the image we’ve built above
docker tag springboot-docker:latest springboot-docker:v1.0.0

Login to your Docker Hub Account, create a repository
docker tag springboot-docker:v1.0.0 sunlight4d/springboot-docker:v1.0.0

- Push your own image to Docker Hub
Push to Docker Hub:
docker push sunlight4d/springboot-docker:v1.0.0
Map port: 8085(Host) <=> 8083(Container)

- Pull and start/run a container
docker run -dp 8085:8083 \
--name springboot-docker-container \
-v "$(pwd):/app" \   (có thể để đường dẫn volum bằng đường dẫn của mk : bằng cách thay thế $(pwd) = đường dẫn chi tiết)
--network springboot-app-network \
sunlight4d/springboot-docker:v1.0.0

Test Springboot app(you can use Web Browser, Postman):

curl --request GET \
--url http://localhost:8085/students/hello \
--header 'content-type: application/json'

Update code & rerun:
docker restart springboot-docker-container

Now create another MySQL container and put this within the same 
network with springboot-docker-container:

docker network create springboot-app-network

docker run --rm -d \
-v mysql-springboot-data:/var/lib/mysql \
-v mysql-springboot-config-deamond:/etc/mysql/conf.d \
--name mysql-springboot-container \
-p 3310:3306 \
-e MYSQL_USER=hoangnd \
-e MYSQL_PASSWORD=Abc@123456789 \
-e MYSQL_ROOT_PASSWORD=Abc@123456789 \
-e MYSQL_DATABASE=StudentManagement \
--network springboot-app-network \
mysql:8.0.28

Access mysql's command line inside mysql-springboot-container:
docker exec -ti mysql-springboot-container mysql -u root -p

Now replace all command to create containers into a .yml file
=> use Docker Compose
Build Docker Compose file:
#Remove old containers:

docker rm -f mysql-springboot-container springboot-docker-container
docker-compose -f docker-compose.dev.yml up -d --build