										Java Core

  
Interface : bao gồm các phương thức trừu tượng, Chỉ có tên hàm để mô tả hành vi mà không có thân hàm thực hiện hành vi đó - 

Abstract Class: Giống như 1 class, chỉ có thêm các phương thức trừu tượng, khi 1 class extend 1 abtract class thì phải dc implement tất cả các phương thức đó.

1 class chỉ có thể extend 1 class 

1 class có thể implemtent 1 hoặc nhiều interface(abst)

1 interface extend nhiều interface khác

Array là truy xuất ngẫu nhiên các phần tử => thao tác lấy ra các phần tử nhanh hơn LinkedList => lưu trữ dựa trê chỉ mục (index)
							=> thao tác thêm và xoá thì châm hơn, vì sau khi thêm và xoá array sẽ phải sắp xếp lại các phần tử

Linked List không thể truy xuất ngẫu nhiên : phải duyệt từ đầu đến cuối để tìm ra phần tử
							 => truy xuất chậm hơn array
							 => thao tác thêm xoá nhanh hơn vì k cần sắp xếp lại các phần tử, mà chỉ cần cập nhập lại tham chiếu tới phần tử trước và sau nó.
============================================================================================================================================================
										 Exception 
Checked exception:  là những ngoại lệ mà phải được xử lý hoặc được đề nghị xử lí trong code. VD: 1 không thể chia dc cho 0, IDE hiện dấu đỏ để ta sửa
IOException, SQLException

Unchecked exception: là những ngoại lệ không bắt buộc phải xử lý, chúng xuất hiện do lỗi logic hoặc các lỗi khác trong chương trình
VD : NullPointerException, chúng ta cần handler nó ra.


@ExceptionHandler : đánh dấu method sẽ sử lý ex cụ thể trong controller => chỉ sử dụng được trong 1 controller cụ thể
@HandlerExceptionResolver :Global hơn Exception cho phép tự custom 1 handlerex
@ControlerAdivce: đến từ AOP lập trình hướng khía cạnh, nó sẽ bắt lỗi và trả ra cho client mà k cần qua controller



============================================================================================================================================================
							Vòng đời (các trạng thái) của một Thread trong java

NEW  : Là trạng thái khi luồng vừa được khởi tạo bằng phương thức khởi tạo của lớp Thread nhưng chưa được start()
					=> luồng được tạo ra nhưng chưa được cấp phát tài nguyên và cũng chưa chạy.  => Ngoại lệ : IllegalThreadStateException khi ép stop,resume, suspen

RUNNABLE : Sau khi gọi method Start thì luồng dc cấp phát tài nguyên và các lịch điều phối CPU cho luông test bắt đầu có hiệu lực.
					=> đây là trạng thái runnable chứ k phải là running, luồng không thực sự luôn chạy mà tuỳ vào hệ thống mà có sự điều phối CPu khác nhau.

WAITING : Thread chờ không giới hạn cho đến khi 1 luồng khác đánh thức nó.bằng notify hoặc notifyAll

TIMED_WAITING : Thread chờ trong 1 thời gian nhất định, hoặc là có 1 luồng khác đánh thức nó.bằng notify hoặc notifyAll

BLOCKED : đây là trạng thái NOT_Runnable là trạng thái thread vẫn còn sống, nhưng hiện tại không được chạy.Thread chờ một monitor để unlock một đối tượng mà nó cần.

TERMINATED : Một thread ở trong trạng thái terminated hoặc dead khi phương thức run() của nó bị thoát. => bằng lệnh stop hoặc destroy

============================================================================================================================================================
								Khi nào dùng Thread và Runnable


Tạo 1 tiến trình nhiều luồng : extend Thread
						=> MyThread th = new MyThread();
					 implement Runnable
						=> Thread th = new Thread( new MyThread ());


==> Khi muốn chia sẻ biến giữa các Thread trong process thì nên implement Runnable.(hay làm)











